#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app         = require('../app');
var debug       = require('debug')('app:server');
var http        = require('http');
var models      = require('../models');
var env         = process.env.NODE_ENV || 'development';
var config      = require(__dirname + '/../config/config.json')[env];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

// Initially fill DB with values
if (config.sequelizeSyncForce)
{
    var administratorRole;
}
models.sequelize.sync({force: config.sequelizeSyncForce})
.then(function(){
    if (config.sequelizeSyncForce)
    {
        models.Role.create({ title: 'Administrator' }).then(function(role){
            administratorRole = role;
            models.User.create({ email: 'maska@mail.ru', password: '123', firstname: 'Alexey', lastname: 'Maistrenko', activated: true, blocked: false }).then(function(user){
                user.addRole(administratorRole.id);
            })
        });
        models.Role.create({ title: 'Student' }).then(function(role){
            studentRole = role;
            models.User.create({ email: 'maska@3si2.com', password: '123', firstname: 'Alexey', lastname: 'Maistrenko', activated: true, blocked: false }).then(function(user){
                user.addRole(studentRole.id);
            })
        });
    }
})
.then(function(){
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function() {
      debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
